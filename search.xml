<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>binaryTreeTraverse</title>
      <link href="/2020/03/04/binaryTreeTraverse/"/>
      <url>/2020/03/04/binaryTreeTraverse/</url>
      
        <content type="html"><![CDATA[<h1 id="二叉树的中序，前序，后序遍历"><a href="#二叉树的中序，前序，后序遍历" class="headerlink" title="二叉树的中序，前序，后序遍历"></a>二叉树的中序，前序，后序遍历</h1><p>leetcode 相关题目<br> 94.二叉树的中序遍历<br> 解法包含了递归和栈循环</p><a id="more"></a><h1 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h1><p>关于二叉树的遍历是最基础的算法题目，无论是在面试过程中还是在实际工作中都会遇到关于树形结构的问题。<br>树形结构可以说是在链表的基础上，从一个链分支成多个链。如果是一个普通树那么我们想要将树的所有节点遍历一遍，需要的时间复杂度是O(n)的，与链表是相同的。如果是一个二叉搜索树，时间复杂度就会从O(n) 变成 O(logn)，之后会写相关二叉搜索树以及二分查找的题目。</p><h2 id="二叉树中序遍历"><a href="#二叉树中序遍历" class="headerlink" title="二叉树中序遍历"></a>二叉树中序遍历</h2><p>这个伪代码是我看过的比较严谨的伪代码，写的思路非常清晰。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// inorder</span></span><br><span class="line">def inorder(self, root)</span><br><span class="line"> <span class="keyword">if</span> root:</span><br><span class="line">  self.inorder(root.left)</span><br><span class="line">  self.traverse_path.append(root.val)</span><br><span class="line">  self.inorder(root.right)</span><br></pre></td></tr></table></figure><p><a href="https://leetcode-cn.com/problems/binary-tree-inorder-traversal/" target="_blank" rel="noopener"><strong>leetcode94二叉树中序遍历</strong></a><br>对于树的遍历，递归式最直观也是最简单的解题方式，比如这道题：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> inorderTraversal = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> result = []</span><br><span class="line">  helper(root, result)</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">helper</span> (<span class="params">root, result</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 递归的出口 就是当不存在 根元素的时候</span></span><br><span class="line">  <span class="keyword">if</span> (!root) <span class="keyword">return</span></span><br><span class="line">  helper(root.left, result)</span><br><span class="line">  result.push(root)</span><br><span class="line">  helper(root.right, result)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 提交多次基本成绩式 64% 左右</span></span><br></pre></td></tr></table></figure><p>递归确实是很危险，如果不去做优化当数据量大的时候很容易给内存造成巨大压力。但是优化后的递归其实时间复杂度是和循环的时间度基本相同。下面的解法是借用栈和循环来完成的。<br>这种解法是通过手动维护一个栈的方式来模拟递归，为什么这么说。从JavaScript执行上下文的角度来看，首先全局就是一个最外层的执行栈，每当我们调用一次函数就会又产生上一个执行上下文，然后压入栈中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo3</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'foo3'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo2</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  foo3()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo1</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  foo2()</span><br><span class="line">&#125;</span><br><span class="line">foo1()</span><br><span class="line"><span class="comment">// 每当我们调用一个函数的时候 就是push到这个stack中 每当一个函数执行完毕就会pop</span></span><br></pre></td></tr></table></figure><p>回到我们这道题中来看通过循环维护一个栈的解法（个人认为这个解法可能比较难以想象的地方是对于二叉树遍历节点的走向还不是很熟悉如果是这样可以，<a href="https://visualgo.net/zh/bst" target="_blank" rel="noopener"><strong>通过这个连接</strong></a>尝试观察中序遍历的二叉树节点走向）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> inorderTraversal = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> stack, result</span><br><span class="line">  <span class="comment">// 如果一个遍历到了最后一个节点 没有左右节点的时候 </span></span><br><span class="line">  <span class="comment">// 这个时候应该出栈进入 result数组中 这就是为什么要添加判断 stack 栈是否为空</span></span><br><span class="line">  <span class="keyword">while</span> (root || stack.length) &#123;</span><br><span class="line">    <span class="comment">// 一直走到最左的节点</span></span><br><span class="line">    <span class="keyword">while</span> (root) &#123;</span><br><span class="line">      stack.push(root)</span><br><span class="line">      root = root.left</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 最左节点的根节点</span></span><br><span class="line">    root = stack.pop()</span><br><span class="line">    <span class="comment">// 出栈的节点就是记录节点的时候</span></span><br><span class="line">    result.push(root.val)</span><br><span class="line">    <span class="comment">// 已经确定出栈的根节点是没有左节点了，也已经将根节点压入栈中了，所以遍历右节点就行了</span></span><br><span class="line">    root = root.right <span class="comment">// 如果也没有又节点就是最末端</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后是用JavaScript 实现的莫里斯遍历</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> inorderTraversal = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 这种方法破坏了原有的 树状结构</span></span><br><span class="line">  <span class="keyword">let</span> curr = root, result = [], pre</span><br><span class="line">  <span class="comment">// 其实是将树结构 打印成相对输出的链表的顺序</span></span><br><span class="line">  <span class="keyword">while</span> (curr) &#123;</span><br><span class="line">    <span class="keyword">if</span> (curr.left) &#123;</span><br><span class="line">      <span class="comment">// 存在左节点 就进入左节点 然后以当前左节点作为根节点 将 左 根 右 节点进行排序</span></span><br><span class="line">      pre = curr.left</span><br><span class="line">      <span class="comment">// 先找到最右的节点</span></span><br><span class="line">      <span class="keyword">while</span> (pre.right) &#123;</span><br><span class="line">        pre = pre.right</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 当前的 pre 是最右节点 </span></span><br><span class="line">      <span class="comment">// pre.right 应该是空</span></span><br><span class="line">      <span class="comment">// 为什么寻找最右的节点</span></span><br><span class="line">      <span class="comment">// 当我们完成一次完成的左节点的遍历 最终结束的点一定是 在右节点结束的</span></span><br><span class="line">      <span class="comment">// 当右节点遍历结束之后 下一个输出的节点就是 此左节点的根节点 也就是左节点上一次的节点</span></span><br><span class="line">      <span class="comment">// 所以输出顺序就是 在左节点中找到最右节点 那么这个最右节点下一个节点就应该是上一层的根节点</span></span><br><span class="line">      pre.right = curr</span><br><span class="line">      <span class="keyword">let</span> temp = curr</span><br><span class="line">      curr = curr.left</span><br><span class="line">      temp.left = <span class="literal">null</span></span><br><span class="line">      <span class="comment">// 总的来将 这个解法是以根节点 为基准找根节点 上一个节点 也就是最近的左节点的最右一个节点</span></span><br><span class="line">      <span class="comment">// 在以 根节点的 左节点为 基准 寻找这个节点上的第一个左节点 最右节点 </span></span><br><span class="line">      <span class="comment">// 最终会排成一天直线</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 但没有左节点的时候 就把当前的节点 放入result中说明 当前的节点就是最左边的节点 也就是链表的头</span></span><br><span class="line">      result.push(curr)</span><br><span class="line">      <span class="comment">// 然后继续拼接又节点</span></span><br><span class="line">      <span class="comment">// 向下走</span></span><br><span class="line">      curr = curr.right</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  8 % 这个结果怎么说呢</span></span><br></pre></td></tr></table></figure><h2 id="二叉树前序遍历"><a href="#二叉树前序遍历" class="headerlink" title="二叉树前序遍历"></a>二叉树前序遍历</h2><p><a href="https://leetcode-cn.com/problems/binary-tree-preorder-traversal/" target="_blank" rel="noopener">二叉树的前序遍历</a><br>前序遍历的递归公式 同样实用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def preorder (self, root)</span><br><span class="line">  <span class="keyword">if</span> root:</span><br><span class="line">    self.traverse_path(root.val)</span><br><span class="line">    self.preorder(root.left)</span><br><span class="line">    self.preorder(root.right)</span><br></pre></td></tr></table></figure><p>这里其实和中序遍历是一样都是通用公式，只是在节点输出位置改变就不再重复了。<br>然后是通过循环的方式解决，因为前序遍历是优先遍历根节点，从逻辑上最直观的就是广度优先的遍历。而本体就可以使用广度优先方式解题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> preorderTraversal = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> stack = [], result = []</span><br><span class="line">  <span class="keyword">if</span> (!root) <span class="keyword">return</span> []</span><br><span class="line">  stack.push(root)</span><br><span class="line">  <span class="comment">// 循环的出口是栈内不在节点，也就是到了最底层了</span></span><br><span class="line">  <span class="keyword">while</span>(stack.length) &#123;</span><br><span class="line">    <span class="keyword">let</span> node = stack.pop()</span><br><span class="line">    result.push(node.val)</span><br><span class="line">    <span class="keyword">if</span> (node.right) stack.push(node.right)</span><br><span class="line">    <span class="keyword">if</span> (node.left) stack.push(node.left)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树遍历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>isAnagram</title>
      <link href="/2020/03/02/isAnagram/"/>
      <url>/2020/03/02/isAnagram/</url>
      
        <content type="html"><![CDATA[<h1 id="有效的字母异位词"><a href="#有效的字母异位词" class="headerlink" title="有效的字母异位词"></a>有效的字母异位词</h1><p>分析题目：<br>字母异位词本道题目中是包含了相同的两个字母，也就是说两个相同的字母也算做了异位词。主要是考察两个字符的元素组成是否相同</p><a id="more"></a><h1 id="leetcode-242-有效的字母异位词"><a href="#leetcode-242-有效的字母异位词" class="headerlink" title="leetcode 242 有效的字母异位词"></a>leetcode 242 有效的字母异位词</h1><p>分析题目：<br>字母异位词本道题目中是包含了相同的两个字母，也就是说两个相同的字母也算做了异位词。主要是考察两个字符的元素组成是否相同</p><h3 id="题解-1-排序"><a href="#题解-1-排序" class="headerlink" title="题解 1. 排序"></a>题解 1. 排序</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isAnagram = <span class="function"><span class="keyword">function</span>(<span class="params">s, t</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 把排序放在第一个是因为 这类题目排序是一个很重要的思路 之后会有一个将 异位字母分类的题目中一个主要解法就是通过排序完成的</span></span><br><span class="line">  <span class="keyword">if</span> (s.length !== t.length) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  <span class="keyword">let</span> sSorted = s.split(<span class="string">''</span>).sort().join(<span class="string">''</span>) </span><br><span class="line">  <span class="keyword">let</span> tSorted = t.split(<span class="string">''</span>).sort().join(<span class="string">''</span>) </span><br><span class="line">  <span class="keyword">if</span> (sSorted !== tSorted) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment">// 128 ms 30.78% 38.1 MB 50.09%</span></span><br><span class="line">  <span class="comment">// 132 ms 25.77% 38.2 MB 45.48%</span></span><br><span class="line">  <span class="comment">// 时间复杂度 O(nlogn)</span></span><br></pre></td></tr></table></figure><h3 id="题解-2-hash-table"><a href="#题解-2-hash-table" class="headerlink" title="题解 2. hash table"></a>题解 2. hash table</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isAnagram = <span class="function"><span class="keyword">function</span>(<span class="params">s, t</span>) </span>&#123; </span><br><span class="line">  <span class="comment">// 像这种不太复杂的题目 使用hash table 基本都是 O（n）的时间复杂度</span></span><br><span class="line">  <span class="keyword">if</span> (s.length !== t.length) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  <span class="keyword">let</span> len = s.length</span><br><span class="line">  <span class="keyword">let</span> hashMap = <span class="keyword">new</span> <span class="built_in">Map</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="comment">// 将字符中不同字母 分类 统计每一类型 的数量</span></span><br><span class="line">    <span class="keyword">if</span> (hashMap.has(s[i])) &#123;</span><br><span class="line">      hashMap.set(s[i], hashMap.get(s[i]) + <span class="number">1</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      hashMap.set(s[i], <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; len; j++) &#123;</span><br><span class="line">    <span class="comment">// 如果 两个字母的 类型相同 每个类型的字母数量也相同 那么这两个字母就是异位字母</span></span><br><span class="line">    <span class="keyword">if</span> (!hashMap.has(t[j]) || hashMap.get(t[j]) === <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    hashMap.set(t[j], hashMap.get(t[j]) - <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment">//  76 ms, faster than 59.73%</span></span><br><span class="line">  <span class="comment">//  100 ms 51.82%</span></span><br><span class="line">  <span class="comment">// 这个已经O(n)的复杂度了 但是结果也是没有及格</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最后是推荐解法：-数组模拟hash表"><a href="#最后是推荐解法：-数组模拟hash表" class="headerlink" title="最后是推荐解法： 数组模拟hash表"></a>最后是推荐解法： 数组模拟hash表</h3><p>这个思路 主要在一 用一个 26 位的数组模拟 hashmap 也是 O(n) 的复杂度但是真的很快</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isAnagram = <span class="function"><span class="keyword">function</span>(<span class="params">s, t</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (s.length !== t.length) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  <span class="keyword">let</span> len = s.length</span><br><span class="line">  <span class="keyword">let</span> hashArray = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">26</span>).fill(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">let</span> baseCount = <span class="string">'a'</span>.charCodeAt()</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) hashArray[s.charCodeAt(i) - baseCount]++</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; len; j++) hashArray[t.charCodeAt(j) - baseCount]--</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> hashArray) <span class="keyword">if</span> (hashArray[key] !== <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment">// 60 ms 99.73%</span></span><br><span class="line">  <span class="comment">// 64 ms, faster than 91.72%</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>问题在于数据结构上。再同样的时间复杂度，但从两次提交结果来看数组要比map快很多。在网上查了一下鲜有介绍JavaScript中两种数据结构的对比</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法有效的字母异位词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 类型值</title>
      <link href="/2020/03/01/JavaScript%E7%B1%BB%E5%9E%8B%E5%80%BC/"/>
      <url>/2020/03/01/JavaScript%E7%B1%BB%E5%9E%8B%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<p>关于 JavaScript 数据类型的几个问题：</p><ul><li>为什么有的编程规范要求用 void 0 代替 undefined</li><li>字符串有最大长度吗</li><li>0.1 + 0.2 为什么不等于 0.3 （经典面试题）</li><li>ES6 中的 Symbol</li><li>为什么可以基础类型添加方法<a id="more"></a></li></ul><h1 id="关于类型"><a href="#关于类型" class="headerlink" title="关于类型"></a>关于类型</h1><h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><p>问题：</p><ul><li>为什么有的编程规范要求用 void 0 代替 undefined</li><li>字符串有最大长度吗</li><li>0.1 + 0.2 为什么不等于 0.3 （经典面试题）</li><li>ES6 中的 Symbol</li><li>为什么可以基础类型添加方法</li></ul><p>概念：</p><ul><li>运行时</li></ul><blockquote><p>运行时类型是代码实际执行过程中我们使用的类型。属于7中基础类型。从变量、参数、返回值到表达式中间结果，任何JavaScript代码运行过程中产生的数据，都具有运行时类型</p></blockquote><p>类型：</p><ol><li><p>Undefined</p></li><li><p>Null</p></li><li><p>Boolean</p></li><li><p>String</p></li><li><p>Number</p></li><li><p>Symbol</p></li><li><p>Object</p><h3 id="Undefined-Null"><a href="#Undefined-Null" class="headerlink" title="Undefined Null"></a>Undefined Null</h3></li></ol><ul><li>Undefined 一种数据类型，表示未定义，有唯一值 undefined，任何变量在赋值之前都是undefined。但是undefined不是关键字，也不是保留字，所以undefined可以被赋值，所以为了避免出现一些不可预知的错误，会使用void运算来给一个任意表达式赋值undefined。</li><li>Null 也是一种数据结构，也只有一个值null。但是表示的意义是<strong>定义了但是值为空</strong>。MDN中的解释是一个对象，但是没有赋值</li></ul><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><ul><li>最大长度是 2 ^ 53 - 1，但是这个最大长度不是<code>字符串</code>的最大长度，而是字符串的UTF16编码的最大长度 。字符串关于UTF16编码的操作有，charAt、charCodeAt等方法</li></ul><blockquote><p>现行字符是以Unicode的方法表示的，每一个Unicode的码点表示一个字符，理论上，Unicode的范围是无限的。UTF是Unicode的编码方式。常见的有UTF16、UTF8</p></blockquote><ul><li>JavaScript 字符串把每个UTF16单元当作一个字符处理，所以处理非BMP（超出 U+0000 - U+FFFF范围），的字符需要格外小心</li></ul><blockquote><p>这种设计继承子Java，标准中的解释是为了 “性能和极可能实现起来简单”</p></blockquote><h3 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h3><ul><li>关于JavaScript中的Number类型，不像Java有多种数字的类型。JavaScript中的Number类型有 2 ^ 64 - 2 ^ 53 + 3 个值。基本遵循了IEEE 754-2008 规定中的双精度浮点规则，但是在此基础上做了一些改动（除以0不出错，引入无穷的概念）：</li></ul><ol><li>NaN 占用了 9007199254740990 </li><li>Infinity 无穷大</li><li>-Infinity 负无穷大</li></ol><ul><li><p>JavaScript 中有 +0 和 -0的概念。区分方式是1/x的Infinity还是-Infinity</p></li><li><p>根据双精度浮点的定义，Number类型中有效整数范围是-0x1fffffffffffff 至 0x1fffffffffffff，所以Number无法精确表示超出此范围外的整数</p></li><li><p>同样，根据浮点数的定义，非整数的Number类型无法使用==（或===）来比较，因此这就是为很么0.1 + 0.2 不等于0.3</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">0.1</span> + <span class="number">0.2</span> == <span class="number">0.3</span>) <span class="comment">// false</span></span><br><span class="line"><span class="comment">// 正确的比较方法</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.abs(<span class="number">0.1</span> + <span class="number">0.2</span> - <span class="number">0.3</span>) &lt;= <span class="built_in">Number</span>.EPSILON)</span><br></pre></td></tr></table></figure><h3 id="关于双浮点精度"><a href="#关于双浮点精度" class="headerlink" title="关于双浮点精度"></a>关于双浮点精度</h3><ul><li>浮点数不是小数</li></ul><p>计算机中的小数分为两种，定点和浮点。定点是小数点固定在32为重的某一个位置，前面是整数，后面是小数，小数点具体的位置取决于程序。优点是运算简单，缺点是范围太小，精度差，不能充分运用储存单位。浮点的设计就是为了克服这个缺点，它相当于一个定点数加上阶码，阶码表示将这个定点数的小数点移动若干位。由于可以用阶码移动小数点，因此成为浮点数。</p><ul><li>JavaScript中的浮点数</li></ul><p>JS只有一种数字类型，Number。遵循了IEEE754标准，使用64位的精度表示浮点。</p><p><img src="/images/16a4f2dfc36ddcc4.webp" alt="16a4f2dfc36ddcc4"></p><p>根据这个标准，将64为分成三个部分</p><ol><li>符号位：1位由于标志位。表示正数或者负数</li><li>指数位：11位由于表示指数。允许的最大指数是1024</li><li>尾数为：剩下的52位，超出的部分自动进一舍零</li></ol><ul><li>为什么会缺失精度</li></ul><p>计算机的计算方式是二进制，编写程序用的是十进制。因此一个程序完成的流程是这样的</p><p>先将十进制转换成二进制，再通过二进制的科学计数法表示，最后再表示成IEEE754的标准，因此在这个过程中出现了精度丢失的问题。</p><ul><li>解决办法</li></ul><ol><li>重写 toFixed（通过转字符串的方式判断）</li><li>将小数转化成相对应的整数，计算之后再还原会小数</li></ol><h3 id="隐式转化"><a href="#隐式转化" class="headerlink" title="隐式转化"></a>隐式转化</h3><ul><li>Object 转换成 String Number</li></ul><p>Javascript 标准中 规定了 ToPrimitive函数 ，将对象类型转换到基础类型。这个过程遵循了“先拆箱再转换”的规则。通过拆箱转换，把对象变成基本类型，再从基本类型转换成对应的String或者Number。</p><p>拆箱转换会尝试调用valueOf和toString来获取相应的基础数据类型。如果valueOf和toString都不存在就会 返回一个TypeError</p><p>关于valueOf和toString的调用顺序分为两种</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o = &#123;</span><br><span class="line">  valueOf () &#123; <span class="built_in">console</span>.log(<span class="string">'value of'</span>); <span class="keyword">return</span> &#123;&#125; &#125;,</span><br><span class="line">  toString () &#123; <span class="built_in">console</span>.log(<span class="string">'to string'</span>); <span class="keyword">return</span> &#123;&#125; &#125;</span><br><span class="line">&#125;</span><br><span class="line">o * <span class="number">2</span></span><br><span class="line"><span class="comment">// value of</span></span><br><span class="line"><span class="comment">// to string</span></span><br><span class="line"><span class="comment">// TypeError</span></span><br></pre></td></tr></table></figure><p>如果换一种形式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>(o)</span><br><span class="line"><span class="comment">// to string</span></span><br><span class="line"><span class="comment">// value of </span></span><br><span class="line"><span class="comment">// TypeError</span></span><br></pre></td></tr></table></figure><p>在通过 String() 函数转换的时候 会优先调用 内部的toString方法 在失败之后再次 尝试valueOf </p><p>而在 es6 之后 允许使用 @@toPrimitive Symbol 来覆盖原有行为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">o[<span class="built_in">Symbol</span>.toPrimitive] = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'toPrimitive'</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'hello'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(o + <span class="string">''</span>)</span><br><span class="line"><span class="comment">// toPrimitive</span></span><br><span class="line"><span class="comment">// hello</span></span><br></pre></td></tr></table></figure><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p>如何不是用 Number 或者 parseInt ，实现String 到 Number 的转化</p><ul><li>几个运算符</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. ~~</span><br><span class="line">2. **</span><br><span class="line">3. &gt;&gt;</span><br><span class="line">4. &gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>这几个符号引申出的就是 JavaScript 的位运算符 确实不会</p><ul><li>关于隐式转化</li></ul><p>隐式转换规则</p><ol><li><p>日期对象调用，toString；其他对象隐式转化，优先调用valueOf（需要返回一个primitive），否组调用 toString，如果仍然没有会一个基础类型的值报错 TypeError</p></li><li><p>进行对象到原始值的转换后，如果其中一个操作数是字符串的话，另一个操作数也会转换为字符串</p></li><li><p>否则，两个操作数都将转换成数字（或NaN）</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript 7其中基础类型 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
