<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JavaScript 类型值</title>
      <link href="/2020/03/01/JavaScript%E7%B1%BB%E5%9E%8B%E5%80%BC/"/>
      <url>/2020/03/01/JavaScript%E7%B1%BB%E5%9E%8B%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<p>关于 JavaScript 数据类型的几个问题：</p><ul><li>为什么有的编程规范要求用 void 0 代替 undefined</li><li>字符串有最大长度吗</li><li>0.1 + 0.2 为什么不等于 0.3 （经典面试题）</li><li>ES6 中的 Symbol</li><li>为什么可以基础类型添加方法<a id="more"></a></li></ul><h1 id="关于类型"><a href="#关于类型" class="headerlink" title="关于类型"></a>关于类型</h1><h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><p>问题：</p><ul><li>为什么有的编程规范要求用 void 0 代替 undefined</li><li>字符串有最大长度吗</li><li>0.1 + 0.2 为什么不等于 0.3 （经典面试题）</li><li>ES6 中的 Symbol</li><li>为什么可以基础类型添加方法</li></ul><p>概念：</p><ul><li>运行时</li></ul><blockquote><p>运行时类型是代码实际执行过程中我们使用的类型。属于7中基础类型。从变量、参数、返回值到表达式中间结果，任何JavaScript代码运行过程中产生的数据，都具有运行时类型</p></blockquote><p>类型：</p><ol><li><p>Undefined</p></li><li><p>Null</p></li><li><p>Boolean</p></li><li><p>String</p></li><li><p>Number</p></li><li><p>Symbol</p></li><li><p>Object</p><h3 id="Undefined-Null"><a href="#Undefined-Null" class="headerlink" title="Undefined Null"></a>Undefined Null</h3></li></ol><ul><li>Undefined 一种数据类型，表示未定义，有唯一值 undefined，任何变量在赋值之前都是undefined。但是undefined不是关键字，也不是保留字，所以undefined可以被赋值，所以为了避免出现一些不可预知的错误，会使用void运算来给一个任意表达式赋值undefined。</li><li>Null 也是一种数据结构，也只有一个值null。但是表示的意义是<strong>定义了但是值为空</strong>。MDN中的解释是一个对象，但是没有赋值</li></ul><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><ul><li>最大长度是 2 ^ 53 - 1，但是这个最大长度不是<code>字符串</code>的最大长度，而是字符串的UTF16编码的最大长度 。字符串关于UTF16编码的操作有，charAt、charCodeAt等方法</li></ul><blockquote><p>现行字符是以Unicode的方法表示的，每一个Unicode的码点表示一个字符，理论上，Unicode的范围是无限的。UTF是Unicode的编码方式。常见的有UTF16、UTF8</p></blockquote><ul><li>JavaScript 字符串把每个UTF16单元当作一个字符处理，所以处理非BMP（超出 U+0000 - U+FFFF范围），的字符需要格外小心</li></ul><blockquote><p>这种设计继承子Java，标准中的解释是为了 “性能和极可能实现起来简单”</p></blockquote><h3 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h3><ul><li>关于JavaScript中的Number类型，不像Java有多种数字的类型。JavaScript中的Number类型有 2 ^ 64 - 2 ^ 53 + 3 个值。基本遵循了IEEE 754-2008 规定中的双精度浮点规则，但是在此基础上做了一些改动（除以0不出错，引入无穷的概念）：</li></ul><ol><li>NaN 占用了 9007199254740990 </li><li>Infinity 无穷大</li><li>-Infinity 负无穷大</li></ol><ul><li><p>JavaScript 中有 +0 和 -0的概念。区分方式是1/x的Infinity还是-Infinity</p></li><li><p>根据双精度浮点的定义，Number类型中有效整数范围是-0x1fffffffffffff 至 0x1fffffffffffff，所以Number无法精确表示超出此范围外的整数</p></li><li><p>同样，根据浮点数的定义，非整数的Number类型无法使用==（或===）来比较，因此这就是为很么0.1 + 0.2 不等于0.3</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">0.1</span> + <span class="number">0.2</span> == <span class="number">0.3</span>) <span class="comment">// false</span></span><br><span class="line"><span class="comment">// 正确的比较方法</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.abs(<span class="number">0.1</span> + <span class="number">0.2</span> - <span class="number">0.3</span>) &lt;= <span class="built_in">Number</span>.EPSILON)</span><br></pre></td></tr></table></figure><h3 id="关于双浮点精度"><a href="#关于双浮点精度" class="headerlink" title="关于双浮点精度"></a>关于双浮点精度</h3><ul><li>浮点数不是小数</li></ul><p>计算机中的小数分为两种，定点和浮点。定点是小数点固定在32为重的某一个位置，前面是整数，后面是小数，小数点具体的位置取决于程序。优点是运算简单，缺点是范围太小，精度差，不能充分运用储存单位。浮点的设计就是为了克服这个缺点，它相当于一个定点数加上阶码，阶码表示将这个定点数的小数点移动若干位。由于可以用阶码移动小数点，因此成为浮点数。</p><ul><li>JavaScript中的浮点数</li></ul><p>JS只有一种数字类型，Number。遵循了IEEE754标准，使用64位的精度表示浮点。</p><p><img src="/images/16a4f2dfc36ddcc4.webp" alt="16a4f2dfc36ddcc4"></p><p>根据这个标准，将64为分成三个部分</p><ol><li>符号位：1位由于标志位。表示正数或者负数</li><li>指数位：11位由于表示指数。允许的最大指数是1024</li><li>尾数为：剩下的52位，超出的部分自动进一舍零</li></ol><ul><li>为什么会缺失精度</li></ul><p>计算机的计算方式是二进制，编写程序用的是十进制。因此一个程序完成的流程是这样的</p><p>先将十进制转换成二进制，再通过二进制的科学计数法表示，最后再表示成IEEE754的标准，因此在这个过程中出现了精度丢失的问题。</p><ul><li>解决办法</li></ul><ol><li>重写 toFixed（通过转字符串的方式判断）</li><li>将小数转化成相对应的整数，计算之后再还原会小数</li></ol><h3 id="隐式转化"><a href="#隐式转化" class="headerlink" title="隐式转化"></a>隐式转化</h3><ul><li>Object 转换成 String Number</li></ul><p>Javascript 标准中 规定了 ToPrimitive函数 ，将对象类型转换到基础类型。这个过程遵循了“先拆箱再转换”的规则。通过拆箱转换，把对象变成基本类型，再从基本类型转换成对应的String或者Number。</p><p>拆箱转换会尝试调用valueOf和toString来获取相应的基础数据类型。如果valueOf和toString都不存在就会 返回一个TypeError</p><p>关于valueOf和toString的调用顺序分为两种</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o = &#123;</span><br><span class="line">  valueOf () &#123; <span class="built_in">console</span>.log(<span class="string">'value of'</span>); <span class="keyword">return</span> &#123;&#125; &#125;,</span><br><span class="line">  toString () &#123; <span class="built_in">console</span>.log(<span class="string">'to string'</span>); <span class="keyword">return</span> &#123;&#125; &#125;</span><br><span class="line">&#125;</span><br><span class="line">o * <span class="number">2</span></span><br><span class="line"><span class="comment">// value of</span></span><br><span class="line"><span class="comment">// to string</span></span><br><span class="line"><span class="comment">// TypeError</span></span><br></pre></td></tr></table></figure><p>如果换一种形式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>(o)</span><br><span class="line"><span class="comment">// to string</span></span><br><span class="line"><span class="comment">// value of </span></span><br><span class="line"><span class="comment">// TypeError</span></span><br></pre></td></tr></table></figure><p>在通过 String() 函数转换的时候 会优先调用 内部的toString方法 在失败之后再次 尝试valueOf </p><p>而在 es6 之后 允许使用 @@toPrimitive Symbol 来覆盖原有行为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">o[<span class="built_in">Symbol</span>.toPrimitive] = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'toPrimitive'</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'hello'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(o + <span class="string">''</span>)</span><br><span class="line"><span class="comment">// toPrimitive</span></span><br><span class="line"><span class="comment">// hello</span></span><br></pre></td></tr></table></figure><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p>如何不是用 Number 或者 parseInt ，实现String 到 Number 的转化</p><ul><li>几个运算符</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. ~~</span><br><span class="line">2. **</span><br><span class="line">3. &gt;&gt;</span><br><span class="line">4. &gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>这几个符号引申出的就是 JavaScript 的位运算符 确实不会</p><ul><li>关于隐式转化</li></ul><p>隐式转换规则</p><ol><li><p>日期对象调用，toString；其他对象隐式转化，优先调用valueOf（需要返回一个primitive），否组调用 toString，如果仍然没有会一个基础类型的值报错 TypeError</p></li><li><p>进行对象到原始值的转换后，如果其中一个操作数是字符串的话，另一个操作数也会转换为字符串</p></li><li><p>否则，两个操作数都将转换成数字（或NaN）</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript 7其中基础类型 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
